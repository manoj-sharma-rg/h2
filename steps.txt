to run api
env312\\Scripts\\activate 
pip install -r requirements.txt
uvicorn app.main:app --reload --reload-dir app --reload-dir tests

to run ui app
cd ui
install node.js
npm install 
npm start
--------------------


created initial.txt manually
generated brd.md 
generated prd.md
phase wise implementation plan in prd

phase 1 
git init
git remote add origin https://github.com/manoj-sharma-rg/h2.git
git branch -M main
git pull origin main --allow-unrelated-histories
git add .
git commit -m "initial commit"
git push -u origin main

set PYTHONHOME=
set PYTHONPATH=
python -m venv env312
env312\\Scripts\\activate 
pip install fastapi uvicorn pydantic pytest
pip freeze > requirements.txt

tell it to create initially suggested structure, it said
Phase 1 Complete - What's Been Created:
1. Project Structure
✅ Complete directory structure with all necessary modules
✅ FastAPI application with proper configuration
✅ Plugin system for PMS translators
✅ Utility modules for common operations
2. Core Components
✅ Configuration Management (app/core/config.py) - Environment-based settings
✅ Logging System (app/core/logging.py) - Structured logging with configurable levels
✅ API Gateway (app/api/endpoints.py) - REST endpoints with authentication
✅ Plugin System (app/plugins/) - Auto-discoverable PMS translators
3. Utility Modules
✅ Date Utils (app/utils/date_utils.py) - Date parsing/formatting in multiple formats
✅ Currency Utils (app/utils/currency_utils.py) - Currency handling and formatting
✅ LOS Utils (app/utils/los_utils.py) - Length of Stay pattern conversion
✅ Boolean Utils (app/utils/boolean_utils.py) - Boolean/flag conversion utilities
4. Testing Framework
✅ Unit Tests (tests/test_utils.py) - Comprehensive tests for utility functions
✅ Plugin Tests (tests/test_plugins.py) - Tests for plugin system functionality
5. Documentation
✅ README.md - Comprehensive project documentation
✅ Environment Example (env.example) - Configuration template

start app 'uvicorn app.main:app --reload --reload-dir app --reload-dir tests'
push to repo

Phase 2
i gave it a real PMS message format for cloud beds
it created mappings folder to store pms wise mappings with cloudbeds.yaml
it implemented a mapping loader and validator utility
it updated plugin base to support loading and using this mapping

next, 
it implemented translation logic for cloud beds
Update the /api/v1/pms/{pms_code} POST endpoint to:
Look up the PMS translator for the given pms_code.
Validate the incoming message.
Call the appropriate translation method (translate_availability or translate_rate).
Return the translated RGBridge data (for now, as JSON).
If the PMS code is not registered, return a 404.
If validation fails, return a 400.

i gave curl request 
curl -X POST "http://localhost:8000/api/v1/pms/cloudbeds?message_type=availability" \  -H "Content-Type: application/json" \  -H "X-API-Key: your-api-key-2" \  -d @samples/Cloudbeds_ARIUpdate.json

What’s Working
The Cloudbeds PMS message is being parsed and mapped to RGBridge fields.
The /api/v1/pms/cloudbeds?message_type=availability endpoint is returning the translated data.
The plugin system is correctly registering and using the Cloudbeds translator.


Phase 3: RGBridge XML Generation & XSD Validation
Step 1: Create a sample XSD for RGBridge Availability and Rate messages
Step 2: Implement XML builder utility
Step 3: Implement XSD validation utility
Step 4: Update the API:The endpoint will return XML (with Content-Type: application/xml).

Next steps:
 support rate messages, and proceed to posting this XML to internal API.
transalated rate and avail are saved in samples "cb_translated_rate.xml"


API now:
Translates and validates both availability and rate messages.
Generates the correct RGBridge XML.
Validates the XML against the appropriate XSD.
Posts the validated XML to your internal API endpoint (as configured).
Returns the internal API’s response (status and body) to the caller.

USER INTERFACE
npx create-react-app ui --template typescript && 
cd ui && 
npm install @mui/material @emotion/react @emotion/styled @mui/icons-material axios @monaco-editor/react
npm start

mappings view, delete, upload

docker file
cicd

test cases

can u now create a UI wizard that will :
ask for pms info 
and do registering.
then ask for sample message format, 
create yaml to be saved in mappings folder by finding mappings with rgbridge intelligently 
for unmapped properties give option in UI to do mappings 
then create its translator in code as mentioned earlier

you may ask for any custom mapping conversion and incorporate

add testing in ui
add user teams option in ui
refactor pms wise
deploy to dev server
handling unmapped fields





